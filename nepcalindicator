#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import sys
#try which gir is available prioritising Gtk3
try:
    from gi.repository import AppIndicator3 as AppIndicator
except ImportError:
    from gi.repository import AppIndicator
from gi.repository import Gtk, GObject
import datetime
import calendar

### BEGIN LICENSE
# Copyright (C) 2011 Shritesh Bhattarai shriteshb@gmail.com
# Copyright (C) 2014 Sagar Chalise  <chalisesagar AT  gmail  DOT com>
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
### END LICENSE

class NepaliDateConverter:
    '''
    A class to convert Bikram Samwat (B.S.) to A.D. and vice versa.

    Usage:
    converter = NepaliDateConverter()
    print converter.ad2bs((1995,9,12))
    print converter.bs2ad((2052,05,27))

    Range:
    1944/4/1 A.D. to 2043/4/13 A.D.
    2000/9/17 B.S. to 2099/12/20 B.S.

    bs : a dictionary that contains the number of days in each month of the B.S. year
    bs_equiv, ad_equiv  : The B.S. and A.D. equivalent dates for counting and calculation

    '''

    (bs_equiv, ad_equiv) = ((2000,9,17),(1944,1,1))

    bs = {}
    bs[2000]=(30,32,31,32,31,30,30,30,29,30,29,31)
    bs[2001]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2002]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2003]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2004]=(30,32,31,32,31,30,30,30,29,30,29,31)
    bs[2005]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2006]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2007]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2008]=(31,31,31,32,31,31,29,30,30,29,29,31)
    bs[2009]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2010]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2011]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2012]=(31,31,31,32,31,31,29,30,30,29,30,30)
    bs[2013]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2014]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2015]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2016]=(31,31,31,32,31,31,29,30,30,29,30,30)
    bs[2017]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2018]=(31,32,31,32,31,30,30,29,30,29,30,30)
    bs[2019]=(31,32,31,32,31,30,30,30,29,30,29,31)
    bs[2020]=(31,31,31,32,31,31,30,29,30,29,30,30)
    bs[2021]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2022]=(31,32,31,32,31,30,30,30,29,29,30,30)
    bs[2023]=(31,32,31,32,31,30,30,30,29,30,29,31)
    bs[2024]=(31,31,31,32,31,31,30,29,30,29,30,30)
    bs[2025]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2026]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2027]=(30,32,31,32,31,30,30,30,29,30,29,31)
    bs[2028]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2029]=(31,31,32,31,32,30,30,29,30,29,30,30)
    bs[2030]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2031]=(30,32,31,32,31,30,30,30,29,30,29,31)
    bs[2032]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2033]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2034]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2035]=(30,32,31,32,31,31,29,30,30,29,29,31)
    bs[2036]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2037]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2038]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2039]=(31,31,31,32,31,31,29,30,30,29,30,30)
    bs[2040]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2041]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2042]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2043]=(31,31,31,32,31,31,29,30,30,29,30,30)
    bs[2044]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2045]=(31,32,31,32,31,30,30,29,30,29,30,30)
    bs[2046]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2047]=(31,31,31,32,31,31,30,29,30,29,30,30)
    bs[2048]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2049]=(31,32,31,32,31,30,30,30,29,29,30,30)
    bs[2050]=(31,32,31,32,31,30,30,30,29,30,29,31)
    bs[2051]=(31,31,31,32,31,31,30,29,30,29,30,30)
    bs[2052]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2053]=(31,32,31,32,31,30,30,30,29,29,30,30)
    bs[2054]=(31,32,31,32,31,30,30,30,29,30,29,31)
    bs[2055]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2056]=(31,31,32,31,32,30,30,29,30,29,30,30)
    bs[2057]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2058]=(30,32,31,32,31,30,30,30,29,30,29,31)
    bs[2059]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2060]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2061]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2062]=(30,32,31,32,31,31,29,30,29,30,29,31)
    bs[2063]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2064]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2065]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2066]=(31,31,31,32,31,31,29,30,30,29,29,31)
    bs[2067]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2068]=(31,31,32,32,31,30,30,29,30,29,30,30)
    bs[2069]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2070]=(31,31,31,32,31,31,29,30,30,29,30,30)
    bs[2071]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2072]=(31,32,31,32,31,30,30,29,30,29,30,30)
    bs[2073]=(31,32,31,32,31,30,30,30,29,29,30,31)
    bs[2074]=(31,31,31,32,31,31,30,29,30,29,30,30)
    bs[2075]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2076]=(31,32,31,32,31,30,30,30,29,29,30,30)
    bs[2077]=(31,32,31,32,31,30,30,30,29,30,29,31)
    bs[2078]=(31,31,31,32,31,31,30,29,30,29,30,30)
    bs[2079]=(31,31,32,31,31,31,30,29,30,29,30,30)
    bs[2080]=(31,32,31,32,31,30,30,30,29,29,30,30)
    bs[2081]=(31,31,32,32,31,30,30,30,29,30,30,30)
    bs[2082]=(30,32,31,32,31,30,30,30,29,30,30,30)
    bs[2083]=(31,31,32,31,31,30,30,30,29,30,30,30)
    bs[2084]=(31,31,32,31,31,30,30,30,29,30,30,30)
    bs[2085]=(31,32,31,32,30,31,30,30,29,30,30,30)
    bs[2086]=(30,32,31,32,31,30,30,30,29,30,30,30)
    bs[2087]=(31,31,32,31,31,31,30,30,29,30,30,30)
    bs[2088]=(30,31,32,32,30,31,30,30,29,30,30,30)
    bs[2089]=(30,32,31,32,31,30,30,30,29,30,30,30)
    bs[2090]=(30,32,31,32,31,30,30,30,29,30,30,30)
    bs[2091]=(31,31,32,31,31,31,30,30,29,30,30,30)
    bs[2092]=(30,31,32,32,31,30,30,30,29,30,30,30)
    bs[2093]=(30,32,31,32,31,30,30,30,29,30,30,30)
    bs[2094]=(31,31,32,31,31,30,30,30,29,30,30,30)
    bs[2095]=(31,31,32,31,31,31,30,29,30,30,30,30)
    bs[2096]=(30,31,32,32,31,30,30,29,30,29,30,30)
    bs[2097]=(31,32,31,32,31,30,30,30,29,30,30,30)
    bs[2098]=(31,31,32,31,31,31,29,30,29,30,29,31)
    bs[2099]=(31,31,32,31,31,31,30,29,29,30,30,30)

    nepday = {'Sun': "आइतवार", 'Mon': "सोमवार", 'Tue': "मंगलवार",
                'Wed': "बुधवार", 'Thu': "बिहिवार", 'Fri': "शुक्रवार", 'Sat': "शनिवार"}

    @staticmethod
    def date_from_tuple(tuple_to_convert):
        '''
        Returns the given tuple as datetime.date object

        tuple_to_convert : A tuple in the format (year,month,day)

        '''
        (year, month, day) = tuple_to_convert
        return datetime.date(year, month, day)

    @staticmethod
    def tuple_from_date(date_to_convert):
        '''
        Returns the given date object as tuple in the format (year,month,day)

        date_to_convert : A date object

        '''
        if not isinstance(date_to_convert, (datetime.date, datetime.datetime)):
            raise ValueError("date_to_convert should be date object")
        return (date_to_convert.year, date_to_convert.month, date_to_convert.day)
        
    def count_ad_days(self,begin_ad_date,end_ad_date):
        '''
        Returns the number of days between the two given A.D. dates.

        begin_ad_date : A tuple in the format (year,month,day) that specify the date to start counting from.
        end_ad_date : A tuple in the format (year,month,day) that specify the date to end counting.

        '''
        date_begin = self.date_from_tuple(begin_ad_date)
        date_end = self.date_from_tuple(end_ad_date)
        delta = date_end - date_begin
        return delta.days

    def count_bs_days(self,begin_bs_date,end_bs_date):
        '''
        Returns the number of days between the two given B.S. dates.

        begin_ad_date : A tuple in the format (year,month,day) that specify the date to start counting from.
        end_ad_date : A tuple in the format (year,month,day) that specify the date to end counting.

        Algorithm:

        Its not the piece of algorithm, but it works for this program..

        1) First add total days in all the years

        2) Subtract the days from first (n-1) months of the beginning year

        3) Add the number of days from the last month of the beginning year

        4) Subtract the days from the last months from the end year

        5) Add the beginning days excluding the day itself

        6) Add the last remaining days excluding the day itself


        NOTE:
        Tuple in the dictionary starts from 0
        The range(a,b) function starts from a and ends at b-1
        '''
        begin_year, begin_month, begin_day =  begin_bs_date
        end_year, end_month, end_day = end_bs_date
        days = 0
        #1) First add total days in all the years
        for year in range(begin_year, end_year + 1):
            for days_in_month in self.bs[year]:
                days = days + days_in_month
        #2) Subtract the days from first (n-1) months of the beginning year
        for month in range(begin_month):
            days = days - self.bs[begin_year][month]
        #3) Add the number of days from the last month of the beginning year
        days = days + self.bs[begin_year][12-1]
        #4) Subtract the days from the last months from the end year
        for month in range(end_month - 1,12):
            days = days - self.bs[end_year][month]
        #5) Add the beginning days excluding the day itself
        days = days - begin_day - 1
        #5) Add the last remaining days excluding the day itself
        days = days + end_day - 1
        return days

    def add_ad_days(self,ad_date,num_days):
        '''
        Adds the given number of days to the given A.D. date and returns it as a tuple in the format (year,month,day)

        ad_date : A tuple in the format (year,month,day)
        num_days : Number of days to add to the given date

        '''
        date = self.date_from_tuple(ad_date)
        day = datetime.timedelta(days=num_days)
        return self.tuple_from_date(date + day)

    def add_bs_days(self,bs_date,num_days):
        '''
        Adds the given number of days to the given B.S. date and returns it as a tuple in the format (year,month,day)

        bs_date : a tuple in the format (year,month,day)
        num_days : Number of days to add to the given date

        Algorithm:
        1) Add the total number of days to the original days

        2) Until the number of days becomes applicable to the current month, subtract the days by the number of days in the current month and increase the month

        3) If month reaches 12, increase the year by 1 and set the month to 1

        Note:
        Tuple in the dictionary starts from 0
        '''
        (year, month, day) = bs_date
        #1) Add the total number of days to the original days
        day = day + num_days
        #2) Until the number of days becomes applicable to the current month, subtract the days by the number of days in the current month and increase the month
        while day > self.bs[year][month - 1]:
            day = day - self.bs[year][month- 1]
            month = month + 1
            #3) If month reaches 12, increase the year by 1 and set the month to 1
            if month > 12:
                month = 1
                year = year + 1
        return (year, month, day)

    def bs_to_ad(self, bs_date):
        '''
        Returns the A.D. equivalent date as a tuple in the format (year,month,day) if the date is within range, else returns None

        bs_date : A tuple in the format (year,month,day)

        '''
        (year, month, day) = bs_date
        if (year not in range(2000, 2099) or month not in range(1, 12) or day not in range(1, 32)) or not (year == 2000 and month == 9 and day < 17):
            date_delta = self.count_bs_days(self.bs_equiv, bs_date)
            return self.add_ad_days(self.ad_equiv, date_delta)

    def ad_to_bs(self, ad_date):
        '''
        Returns the B.S. equivalent date as a tuple in the format (year,month,day) if the date is within range, else returns None

        bs_date : An tuple in the format (year,month,day)
        '''
        (year, month, day) = ad_date
        if (year in range(1944, 2043) or month in range(1, 12) or day in range(1, 31)) or not (year == 2043 and month == 4 and day > 13):
            day = self.date_from_tuple(ad_date).strftime("%a")
            date_delta = self.count_ad_days(self.ad_equiv, ad_date)
            return self.add_bs_days(self.bs_equiv, date_delta) + (day,)

    @staticmethod
    def eng_to_nep_num(n):
        nums = {'0': "०", '1': "१", '2': "२", '3': "३", '4': "४", '5': "५", '6': "६", '7': "७", '8': "८", '9': "९"}
        numstr = str(n)
        for ch in numstr:
            yield nums[ch]

    def get_today_bs(self):
        return self.ad_to_bs(self.get_today_ad())

    def get_today_ad(self):
        return self.tuple_from_date(datetime.datetime.now())

    @staticmethod
    def get_total_day_of_month(year, month, is_ad=True):
        if is_ad:
            return calendar.monthrange(year, month)[1]
        else:
            return NepaliDateConverter.bs[year][month-1]
   
    def get_today_bs_label(self, short=False):
        nepday = None
        if short:
            nepday = {k: v.replace("वार", "") for k, v in self.nepday.items()}
        today = self.get_date_bs_label(self.get_today_bs(), nepday)
        return today

    def get_date_bs_label(self, date_tuple, nepday=None):
        if nepday is None:
            nepday = self.nepday
        (y, m, d, dd) = date_tuple
        day = nepday.get(dd)
        nepmonths = {1: "बैशाख", 2: "जेष्ठ", 3: "असार", 4:"श्रावण", 5:"भाद्र", 6:"असोज",
                7:"कार्तिक", 8:"मंसिर", 9:"पौष", 10:"माघ", 11:"फाल्गुन", 12:"चैत्र"}
        return "{0} {1} {2}, {3}".format("".join(self.eng_to_nep_num(d)), nepmonths[m], "".join(self.eng_to_nep_num(y)), day)

    def get_date_ad_label(self, date_tuple):
        return self.get_strftime(self.date_from_tuple(date_tuple))
    
    @staticmethod
    def get_strftime(dt_obj):
        return dt_obj.strftime("%A %-d %B, %Y")

    @staticmethod
    def get_today_ad_label():
        return NepaliDateConverter.get_strftime(datetime.datetime.now())
        

        

class ConverterDialog(Gtk.Dialog):
    def __init__(self, title, adjustments, active_month):
        Gtk.Dialog.__init__(self, title=title, parent=None, flags=1)
        self.set_resizable(False)
        self.set_default_size(200, 200)
        button = Gtk.Button("_Close", use_underline=True)
        button.connect("clicked", self.on_close_clicked)
        self.box = self.get_content_area()
        year_adj, month_adj, self.day_adj = adjustments
        year_label = Gtk.Label("Year")
        self.spinbutton_year = Gtk.SpinButton()
        self.spinbutton_year.set_can_focus(False)
        self.spinbutton_year.set_numeric(True)
        self.spinbutton_year.set_update_policy(1)
        self.spinbutton_year.set_adjustment(year_adj)
        self.spinbutton_year.set_value(int(year_adj.get_value()))
        self.box.add(year_label)
        self.box.add(self.spinbutton_year)
        month_label = Gtk.Label("Month")
        self.combobox_month = Gtk.ComboBox.new_with_model(month_adj)
        renderer_text = Gtk.CellRendererText()
        self.combobox_month.pack_start(renderer_text, True)
        self.combobox_month.set_active(active_month)
        self.combobox_month.add_attribute(renderer_text, "text", 1)
        self.box.add(month_label)
        self.box.add(self.combobox_month)
        day_label = Gtk.Label("Day")
        self.spinbutton_day = Gtk.SpinButton()
        self.spinbutton_day.set_can_focus(False)
        self.spinbutton_day.set_numeric(True)
        self.spinbutton_day.set_update_policy(1)
        self.spinbutton_day.set_adjustment(self.day_adj)
        self.spinbutton_day.set_value(int(self.day_adj.get_value()))
        self.box.add(day_label)
        self.box.add(self.spinbutton_day)
        self.spinbutton_year.connect("changed", self.show_converted_date)
        self.combobox_month.connect("changed", self.show_converted_date)
        self.spinbutton_day.connect("changed", self.show_converted_date)
        self.converter = NepaliDateConverter()
        self.get_range_of_year = self.spinbutton_year.get_range()
        self.date_label = Gtk.Label()
        self.date_label.set_selectable(True)
        self.ad_to_bs = False
        value = self.converter.get_today_ad_label()
        if  int(min(self.get_range_of_year)) == 1944:
            self.ad_to_bs = True
            value  = self.converter.get_today_bs_label()
        self.date_label.set_markup('<span foreground="blue" size="large">%s</span>' % value)
        self.box.pack_start(Gtk.HSeparator(), True, True, 1)
        self.box.pack_start(Gtk.HSeparator(), True, True, 1)
        self.box.add(self.date_label)
        self.box.pack_start(Gtk.HSeparator(), True, True, 1)
        self.box.pack_start(Gtk.HSeparator(), True, True, 1)
        self.box.pack_start(button, True, True, 1)
        self.show_all()

    def show_converted_date(self, widget):
        year_value =  self.spinbutton_year.get_value_as_int()
        month_value =  self.combobox_month.get_model()[self.combobox_month.get_active_iter()][0]
        day_value =  self.spinbutton_day.get_value_as_int()
        upper_day = self.converter.get_total_day_of_month(year_value, month_value, self.ad_to_bs)
        self.day_adj.set_upper(float(upper_day))
        if self.ad_to_bs:
            ad_to_bs_tuple = self.converter.ad_to_bs((year_value, month_value, min(day_value, upper_day)))
            value = self.converter.get_date_bs_label(ad_to_bs_tuple) if  ad_to_bs_tuple else self.converter.get_today_bs_label()
        else:
            bs_to_ad_tuple = self.converter.bs_to_ad((year_value, month_value, min(day_value, upper_day))) 
            value = self.converter.get_date_ad_label(bs_to_ad_tuple) if bs_to_ad_tuple else self.converter.get_today_ad_label()
        self.spinbutton_day.set_value(min(day_value, upper_day))
        self.date_label.set_markup('<span foreground="blue" size="large">%s</span>' % value)

    def on_close_clicked(self, button):
        self.destroy()
        
class NepaliDateIndicator:
    def __init__(self):
        self.indicator = AppIndicator.Indicator.new("nepali-date-indicator",
                                           "calendar-tray",
                                           AppIndicator.IndicatorCategory.OTHER)
        self.indicator.set_status(AppIndicator.IndicatorStatus.ACTIVE)
        self.menu_setup()
        self.indicator.set_menu(self.menu)

    def menu_setup(self):
        self.menu = Gtk.Menu()
        self.to_bs_menu = Gtk.MenuItem("A.D. To B.S.")
        self.to_ad_menu = Gtk.MenuItem("B.S. To A.D.")
        self.to_ad_menu.connect("activate", self.show_ad_converter)
        self.to_bs_menu.connect("activate", self.show_bs_converter)
        self.to_ad_menu.show()
        self.to_bs_menu.show()
        self.quit_item = Gtk.MenuItem("Quit")
        self.quit_item.connect("activate", self.quit)
        self.quit_item.show()

    def set_date_label(self):
        self.indicator.set_label(self.nep_date.get_today_bs_label(True), "")
        return True

    def main(self):
        self.nep_date = NepaliDateConverter()
        self.indicator.set_label(self.nep_date.get_today_bs_label(True), "")
        GObject.timeout_add_seconds(300, self.set_date_label)
        self.menu.append(self.to_bs_menu)
        self.menu.append(self.to_ad_menu)
        self.menu.append(self.quit_item)
        Gtk.main()

    def quit(self, widget):
        widget.destroy()
        sys.exit(0)

    def create_window(self, title, adjustments, active_month):
        win = ConverterDialog(title, adjustments, active_month-1)
        win.connect("delete-event", Gtk.main_quit)
        Gtk.main()

    @staticmethod
    def create_month_store(store, months):
        store.clear()
        for i, name in enumerate(months):
            if i > 0:
                store.append([i, name])
        return store

    def show_ad_converter(self, widget):
        title = "Convert B.S Date To A.D."
        nep_months = (None, "Baisakh", "Jestha", "Asar", "Shrawan", "Bhadra", "Asoj", "Kartik", "Mangsir", "Poush", "Magh",  "Falgun", "Chaitra")
        month_store = self.create_month_store(Gtk.ListStore(int, str), nep_months) 
        today_year, today_month, today_day, day_name = self.nep_date.get_today_bs()
        start_year = min(NepaliDateConverter.bs.keys())
        end_year = max(NepaliDateConverter.bs.keys())
        end_month = 32
        year_adjustment = Gtk.Adjustment(today_year, start_year, end_year, 1, 10, 0)
        day_adjustment = Gtk.Adjustment(today_day, 1, end_month, 1, 10, 0)
        self.create_window(title, (year_adjustment, month_store,  day_adjustment), today_month)

    def show_bs_converter(self, widget):
        title = "Convert A.D. Date To B.S."
        month_store = self.create_month_store(Gtk.ListStore(int, str), calendar.month_name) 
        start_year = NepaliDateConverter.ad_equiv[0]
        end_year = start_year + len(NepaliDateConverter.bs.keys())
        end_month = 31
        today_year, today_month, today_day = self.nep_date.get_today_ad()
        year_adjustment = Gtk.Adjustment(today_year, start_year, end_year, 1, 10, 0)
        day_adjustment = Gtk.Adjustment(today_day, 1, end_month, 1, 10, 0)
        self.create_window(title, (year_adjustment, month_store,  day_adjustment), today_month)

if __name__ == "__main__":
    NepaliDateIndicator().main()
